/* Generated by Opal 0.6.2 */
(function($opal) {
  var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $range = $opal.range;

  $opal.add_stubs(['$map', '$new', '$upto', '$downcase', '$name', '$class', '$attr_reader', '$+', '$>=', '$-', '$size', '$[]', '$to_i', '$*', '$push', '$translate', '$image', '$pop', '$attr_accessor', '$play', '$should_roar', '$roar', '$should_roar=', '$x', '$cover?', '$position', '$x=', '$-@', '$%', '$<', '$display', '$y', '$new_zebra', '$can_eat?', '$delete', '$<<', '$each', '$update', '$draw']);
  (function($base, $super) {
    function $MovingObject(){};
    var self = $MovingObject = $klass($base, $super, 'MovingObject', $MovingObject);

    var def = self._proto, $scope = self._scope;

    def.image1 = def.elapsed = def.images = def.position = def.image = nil;
    def.$initialize = function(position, image_name, frames) {
      var $a, $b, TMP_1, self = this;

      if (image_name == null) {
        image_name = self.$class().$name().$downcase()
      }
      if (frames == null) {
        frames = 2
      }
      self.position = position;
      self.images = ($a = ($b = (1).$upto(frames)).$map, $a._p = (TMP_1 = function(i){var self = TMP_1._s || this, $a;
if (i == null) i = nil;
      return (($a = $scope.Image) == null ? $opal.cm('Image') : $a).$new("" + (image_name) + "-" + (i) + ".png")}, TMP_1._s = self, TMP_1), $a).call($b);
      self.image = self.image1;
      return self.elapsed = 0;
    };

    self.$attr_reader("position");

    def.$update = function(elapsed) {
      var self = this;

      self.elapsed = self.elapsed['$+'](elapsed);
      if (self.elapsed['$>='](self.images.$size()['$-'](1))) {
        self.elapsed = 0};
      return self.image = self.images['$[]']((self.elapsed['$*'](self.images.$size())).$to_i());
    };

    return (def.$draw = function(d) {
      var $a, self = this;

      d.$push();
      d.$translate(self.position);
      d.$image(self.image, (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 0));
      return d.$pop();
    }, nil) && 'draw';
  })($opal.Object, null);
  (function($base, $super) {
    function $Lion(){};
    var self = $Lion = $klass($base, $super, 'Lion', $Lion);

    var def = self._proto, $scope = self._scope, TMP_2, TMP_3;

    def.roar = def.position = nil;
    self.$attr_accessor("should_roar");

    def.$roar = function() {
      var $a, $b, self = this;

      return (((($a = self.roar) !== false && $a !== nil) ? $a : self.roar = (($b = $scope.Sound) == null ? $opal.cm('Sound') : $b).$new("lion-roar.mp3"))).$play();
    };

    def.$draw = TMP_2 = function(d) {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_2._p, $yield = $iter || nil;

      TMP_2._p = null;
      return $opal.find_super_dispatcher(self, 'draw', TMP_2, $iter).apply(self, $zuper);
    };

    def.$update = TMP_3 = function(elapsed) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_3._p, $yield = $iter || nil;

      TMP_3._p = null;
      if ((($a = self.$should_roar()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$roar();
        self['$should_roar='](false);};
      return $opal.find_super_dispatcher(self, 'update', TMP_3, $iter).apply(self, $zuper);
    };

    return (def['$can_eat?'] = function(other) {
      var self = this, x = nil;

      x = self.position.$x()['$+'](100);
      return ($range(x['$-'](30), x['$+'](30), true))['$cover?'](other.$position().$x());
    }, nil) && 'can_eat?';
  })(self, (($a = $scope.MovingObject) == null ? $opal.cm('MovingObject') : $a));
  (function($base, $super) {
    function $Zebra(){};
    var self = $Zebra = $klass($base, $super, 'Zebra', $Zebra);

    var def = self._proto, $scope = self._scope, TMP_4, TMP_5;

    def.position = nil;
    def.$update = TMP_4 = function(elapsed) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_4._p, $yield = $iter || nil;

      TMP_4._p = null;
      ($a = self.position, $a['$x=']($a.$x()['$+']((elapsed['$*'](300))['$-@']())));
      return $opal.find_super_dispatcher(self, 'update', TMP_4, $iter).apply(self, $zuper);
    };

    return (def.$draw = TMP_5 = function(d) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_5._p, $yield = $iter || nil;

      TMP_5._p = null;
      $opal.find_super_dispatcher(self, 'draw', TMP_5, $iter).apply(self, $zuper);
      return ($a = self.position, $a['$x=']($a.$x()['$%']((d.$size().$x()['$*'](1.5)))));
    }, nil) && 'draw';
  })(self, (($a = $scope.MovingObject) == null ? $opal.cm('MovingObject') : $a));
  (function($base, $super) {
    function $Savannah(){};
    var self = $Savannah = $klass($base, $super, 'Savannah', $Savannah);

    var def = self._proto, $scope = self._scope, TMP_6, TMP_7;

    def.position = nil;
    def.$update = TMP_6 = function(elapsed) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_6._p, $yield = $iter || nil;

      TMP_6._p = null;
      ($a = self.position, $a['$x=']($a.$x()['$+']((elapsed['$*'](50))['$-@']())));
      return $opal.find_super_dispatcher(self, 'update', TMP_6, $iter).apply(self, $zuper);
    };

    return (def.$draw = TMP_7 = function(d) {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_7._p, $yield = $iter || nil;

      TMP_7._p = null;
      if (self.position.$x()['$<'](d.$size().$x()['$-@']())) {
        self.position['$x='](0)};
      return $opal.find_super_dispatcher(self, 'draw', TMP_7, $iter).apply(self, $zuper);
    }, nil) && 'draw';
  })(self, (($a = $scope.MovingObject) == null ? $opal.cm('MovingObject') : $a));
  return (function($base, $super) {
    function $LeoneMangione(){};
    var self = $LeoneMangione = $klass($base, $super, 'LeoneMangione', $LeoneMangione);

    var def = self._proto, $scope = self._scope;

    def.size = def.horizon = def.savannah = def.savannahB = def.zebra = def.lion = def.things = nil;
    def.$setup = function() {
      var $a, self = this;

      self.size = self.$display().$size();
      self.horizon = self.size.$y()['$*'](0.75);
      self.lion = (($a = $scope.Lion) == null ? $opal.cm('Lion') : $a).$new((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](self.size.$x()['$*'](0.2), self.horizon['$*'](1.05)));
      self.zebra = self.$new_zebra();
      self.savannah = (($a = $scope.Savannah) == null ? $opal.cm('Savannah') : $a).$new((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](0, 0), "savannah", 1);
      self.savannahB = (($a = $scope.Savannah) == null ? $opal.cm('Savannah') : $a).$new((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](self.size.$x(), 0), "savannah", 1);
      return self.things = [self.savannah, self.savannahB, self.zebra, self.lion];
    };

    def.$new_zebra = function() {
      var $a, self = this;

      return (($a = $scope.Zebra) == null ? $opal.cm('Zebra') : $a).$new((($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](self.size.$x()['$*'](1.2), self.horizon));
    };

    return (def.$update = function(elapsed) {
      var $a, $b, TMP_8, self = this;

      if ((($a = self.lion['$can_eat?'](self.zebra)) !== nil && (!$a._isBoolean || $a == true))) {
        self.lion['$should_roar='](true);
        self.things.$delete(self.zebra);
        self.zebra = self.$new_zebra();
        self.things['$<<'](self.zebra);};
      return ($a = ($b = self.things).$each, $a._p = (TMP_8 = function(thing){var self = TMP_8._s || this;
if (thing == null) thing = nil;
      thing.$update(elapsed);
        return thing.$draw(self.$display());}, TMP_8._s = self, TMP_8), $a).call($b);
    }, nil) && 'update';
  })(self, (($a = $scope.Game) == null ? $opal.cm('Game') : $a));
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/game.js.map
;
